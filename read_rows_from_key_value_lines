#!/bin/bash

#  I am _so_ going to burn in hell.
#  Read lines of "column value" tuples from arg 2+ and store them in
#  the arrays of name <prefix>_<column>, using prefix passed in arg 1.
function _read_rows_from_key_value_lines() {
    local prefix="$1"
    shift
    unset row_idx
    local column
    local value
    while read column value; do
        if [ -z "$row_idx" ]; then
            #  First column of first row, row column name as row start marker.
            local first_column=$column
            local row_idx=0
        else
            if [ "$column" = "$first_column" ]; then
                #  We've come back around to the first column, start a new row.
                row_idx=$((row_idx + 1))
            fi
        fi
        if [ "$row_idx" = 0 ]; then
            #  We've on the first row, clear the column array from previous calls.
            unset "${prefix}_${column}"
        fi
        #  Ho hum, I gave up and used eval, couldn't get this working with $(())
        printf -v value "%q" "$value"
        eval "${prefix}_${column}[${row_idx}]=$value"
    done <<< "$*"
}
